<div x-data="productList()" x-init="init" x-intersect="loadProducts" x-show="currentPage < lastPage" class="w-full flex justify-center pt-2">
    <img id="loading-spinner" class="loading hidden" src="{{ asset_url }}spinner.gif" width="20" height="20"/>
</div>
<script>
    function productList() {
        return {
            currentPage: {{ products.current_page }},
            lastPage: {{ products.last_page }},
            search: '',
            id: {{ id }},
            init() {
                this.search = new URLSearchParams(window.location.search).get('search') || '';
            },
            async loadProducts() {
                try {
                    document.getElementById('loading-spinner').classList.remove('hidden');
                    let response = await zid.store.product.fetchAll(this.id <= 0  ? null : this.id, { page: this.currentPage + 1, search: this.search });

                    if (response.status === 'success') {
                        let products = response.data.products.data;
                        this.currentPage++;

                        let productsIds = [];
                        products.forEach((product) => {
                            if (!productsIds.includes(product.id)) {
                                productsIds.push(product.id);
                                document.querySelector('.products-list').appendChild(createProductBox(product));
                            }
                        });
                        if (this.currentPage >= this.lastPage) {
                            document.getElementById('loading-spinner').classList.add('hidden');
                        }
                    }
                } catch (error) {
                    console.error('An unexpected error occurred:', error);
                } finally {
                    document.getElementById('loading-spinner').classList.add('hidden');
                }
            }
        };
    }

    function createProductBox(product) {
        let newDiv = document.createElement('div');
        newDiv.classList.add('product', 'h-full');
        const defaultImg = `{{ imageUrl(asset_url ~ 'product-img.svg') }}`
        newDiv.innerHTML = `
            <div class="flex flex-col justify-center gap-2 h-full">
                <a class="mb-auto h-full relative" href="${product.html_url}">
                    
                   <img x-data="{ imageSrc: '${defaultImg}' }"
                    x-intersect:load="imageSrc = '${product.images.length > 0 ? product.images[0]['image']['large']:defaultImg}'" 
                    x-bind:src="imageSrc"
                    class="w-full h-full m-auto object-contain" 
                    alt="${product.name}"
                    loading="lazy" 
                    src='${defaultImg}'/>

                    ${product.has_variants ? `
                        <div class="${'soon' in product.keywords ? 'hidden' : ''} absolute text-center bottom-0 text-xs w-full bg-white">{{locals.product.options}}</div>
                    ` : ''}
                    ${'soon' in product.keywords ? `
                        <div class="absolute uppercase top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-primary bg-[#ffffffab] py-1 text-xs font-medium text-center w-full">{{locals.product.soon}}</div>
                    ` : ''}
                    ${(product.is_infinite === false && product.quantity <= 0) ? `
                        <div class="absolute uppercase top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-primary bg-[#ffffffab] py-1 text-xs font-medium text-center w-full ${'soon' in product.keywords ? 'hidden' : ''}">{{locals.product.out_of_stock}}</div>
                    ` : ''}
                </a>

                ${(() => {
                    let found = false;
                    for (const cat of product.categories) {
                        if (cat.name && cat.name.trim().length > 0 && product.name.trim().slice(0, cat.name.trim().length) === cat.name.trim()) {
                            found = true;
                            return `
                                <p class="hidden text-green">${product.name.slice(0, cat.name.length)}</p>
                                <h1 class="md:text-lg text-base text-center font-bold">${product.name.trim().slice(0, cat.name.trim().length)}</h1>
                                <p class="text-center text-clip text-sm h-16 overflow-hidden">
                                    ${product.name.trim().slice(cat.name.trim().length)}
                                </p>`;
                        }
                    }
                    if (!found) {
                        return `<h3 class="text-center text-clip text-sm h-16 overflow-hidden">${product.name}</h3>`;
                    }
                })()}

                <p class="text-center font-bold ${'soon' in product.keywords ? 'invisible' : ''}">
                    ${product.formatted_sale_price !== null ? product.formatted_sale_price : product.formatted_price}
                </p>
            </div>`;

        return newDiv;
    }
</script>
